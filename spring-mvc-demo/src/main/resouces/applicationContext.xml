<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop  http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <context:annotation-config />

    <bean class="cn.com.magicwifi.framework.core.utils.spring.SpringContextHolder"/>
    <bean class="cn.com.magicwifi.framework.core.datasource.RoutingDataSourceAdvisor"/>

    <!-- hibernate validator
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
    -->

    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="cn.com.admin;cn.com.magicwifi.framework.core.datasource">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>


    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dynamicDataSource"/>
        <property name="typeAliasesPackage" value="cn.com.admin"/>
        <property name="mapperLocations" value="classpath*:/mybatis/**/*Dao.xml"/>
        <property name="configLocation" value="classpath:/mybatis-cfg.xml"/>
        <property name="plugins">
            <array>
                <bean class="cn.com.magicwifi.framework.core.mybatis.plugin.SqlInterceptor"/>
                <bean class="cn.com.magicwifi.framework.core.mybatis.plugin.PaginationInterceptor">
                    <property name="properties">
                        <value/>
                    </property>
                </bean>
            </array>
        </property>
    </bean>


    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.com.admin"/>
        <property name="annotationClass" value="cn.com.magicwifi.framework.core.mybatis.MybatisDao"/>
    </bean>


    <bean  id="transactionalService" class="cn.com.admin.user.service.TransactionalService" scope="prototype"/>

    <bean id="mybatisSqlDao" class="cn.com.magicwifi.framework.core.mybatis.MybatisSqlDao">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
    </bean>

    <!-- 事务管理器配置, 使用jdbc事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dynamicDataSource"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>


    <!-- 定义aspectj -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <!--&lt;!&ndash; 定义受环境影响易变的变量 &ndash;&gt;-->
    <!--<context:property-placeholder ignore-resource-not-found="true" ignore-unresolvable="true"-->
                                  <!--location="classpath*:/application.properties"/>-->

    <!-- 定义受环境影响易变的变量 -->
    <bean id="propertyPlaceholderConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
        <property name="ignoreResourceNotFound" value="true"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath*:/application.properties</value>
            </list>
        </property>
    </bean>


    <bean id="abstractDataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- Connection Pooling Info -->
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxIdle" value="${jdbc.pool.maxIdle}"/>
        <property name="initialSize" value="${jdbc.pool.initialSize}"/>
        <!-- 连接池支持的最大连接数 -->
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>
        <!-- 连接池中连接用完时,新的请求等待时间,毫秒 -->
        <property name="maxWait" value="${jdbc.pool.maxWait}"/>
        <property name="defaultAutoCommit" value="false"/>
        <!-- 是否自动回收超时连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 超时时间(以秒数为单位) -->
        <property name="removeAbandonedTimeout" value="${jdbc.pool.removeAbandonedTimeout}"/>
        <!-- 将会在回收事件后，在log中打印出回收Connection的错误信息，包括在哪个地方用了Connection却忘记关闭了，在调试的时候很有用 -->
        <!--<property name="logAbandoned" value="true" />-->
        <!-- 那么在getNumActive()快要到getMaxActive()的时候，系统会进行无效的 Connection的回收，回收的Connection为removeAbandonedTimeout(默认300秒)中设置的秒数后没有使用的Connection -->
        <!-- 每timeBetweenEvictionRunsMillis毫秒检查一次连接池中空闲的连接,把空闲时间超过minEvictableIdleTimeMillis毫秒的连接断开,直到连接池中的连接数到minIdle为止 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}"/>
        <!-- 连接池中连接可空闲的时间(毫秒)，一定要小于mysql的wait_timeout的值 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}"/>
        <!--<property name="numTestsPerEvictionRun" value="${jdbc.pool.maxActive}" /> -->

        <!-- 取得连接时验证其有效性 -->
        <property name="testOnBorrow" value="false"/>
        <!-- 返回连接时验证其有效性 -->
        <property name="testOnReturn" value="false"/>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除 -->
        <property name="testWhileIdle" value="true"/>
        <!-- 验证sql -->
        <property name="validationQuery" value="select 1"/>
        <!--<property name="validationQueryTimeout" value="1" /> -->
    </bean>


    <!-- 数据源配置,使用应用内的Tomcat JDBC连接池 -->
    <bean id="defaultDataSource" parent="abstractDataSource">
        <!-- Connection Info -->
        <!-- Connection Info -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="dynamicDataSource" class="cn.com.magicwifi.framework.core.datasource.DynamicDataSource">
        <property name="targetDataSources">
            <map>
                <entry key="master" value-ref="defaultDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="defaultDataSource"/>
    </bean>


</beans>